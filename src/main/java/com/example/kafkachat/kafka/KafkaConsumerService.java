package com.example.kafkachat.kafka;

import com.example.kafkachat.model.ChatMessage;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.kafka.common.errors.WakeupException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import javax.swing.*; // ‚òÖ‚òÖ‚òÖ –î–û–ë–ê–í–õ–ï–ù –ò–ú–ü–û–†–¢ ‚òÖ‚òÖ‚òÖ
import java.time.Duration;
import java.util.Collections;
import java.util.Properties;
import java.util.UUID;
import java.util.function.Consumer;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.common.serialization.StringDeserializer;

/**
 * –ö–õ–ê–°–° KafkaConsumerService - –°–ï–†–í–ò–° –ü–û–¢–†–ï–ë–õ–ï–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô –ò–ó KAFKA
 *
 * –ß–¢–û –≠–¢–û–¢ –ö–õ–ê–°–° –î–ï–õ–ê–ï–¢:
 * 1. –°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Kafka Consumer –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–æ–ø–∏–∫–∞
 * 2. –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç JSON-—Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—ä–µ–∫—Ç—ã ChatMessage —Å –ø–æ–º–æ—â—å—é Jackson ObjectMapper
 * 3. –ü–µ—Ä–µ–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É —á–µ—Ä–µ–∑ Consumer<ChatMessage> callback
 * 4. –†–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ Kafka
 * 5. –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏ –≤—ã–∑–æ–≤–µ shutdown()
 * 6. –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
 *
 * –û–°–û–ë–ï–ù–ù–û–°–¢–ò –†–ï–ê–õ–ò–ó–ê–¶–ò–ò:
 * - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ–º–æ–Ω-–ø–æ—Ç–æ–∫ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
 * - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç graceful shutdown —á–µ—Ä–µ–∑ —Ñ–ª–∞–≥ running
 * - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ —Å poll()-—Ç–∞–π–º–∞—É—Ç–æ–º
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–æ–ø–∏–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
 * - –ù–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ —á—Ç–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (latest)
 */

public class KafkaConsumerService {
    private static final Logger logger = LoggerFactory.getLogger(KafkaConsumerService.class);
    private final KafkaConsumer<String, String> consumer;
    private final ObjectMapper mapper = new ObjectMapper();
    private volatile boolean running = true;
    private final Thread consumerThread;
    private final Consumer<ChatMessage> messageHandler;

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–µ—Ä–≤–∏—Å–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è Kafka
     * @param topic —Ç–æ–ø–∏–∫ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
     * @param messageHandler –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    public KafkaConsumerService(String topic, Consumer<ChatMessage> messageHandler) {
        this.messageHandler = messageHandler;

        Properties props = new Properties();
        //props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "host.docker.internal:9092");
        props.put(ConsumerConfig.GROUP_ID_CONFIG, "chat-group-" + UUID.randomUUID());
        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "latest");
        props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, "false");
        props.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, "1000");
        props.put(ConsumerConfig.MAX_POLL_RECORDS_CONFIG, "1");
        props.put(ConsumerConfig.FETCH_MIN_BYTES_CONFIG, "1");
        props.put(ConsumerConfig.FETCH_MAX_WAIT_MS_CONFIG, "100");

        this.consumer = new KafkaConsumer<>(props);
        consumer.subscribe(Collections.singletonList(topic));

        consumerThread = new Thread(() -> {
            try {
                while (running) {
                    try {
                        ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(50));
                        System.out.println("üì• KafkaConsumer: poll() –≤–µ—Ä–Ω—É–ª " + records.count() + " —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–æ–ø–∏–∫–∞");
                        if (records.count() > 0) {
                            logger.debug("Processing {} messages", records.count());

                            for (ConsumerRecord<String, String> record : records) {
                                try {
                                    ChatMessage message = mapper.readValue(record.value(), ChatMessage.class);

                                    SwingUtilities.invokeLater(() -> {
                                        messageHandler.accept(message);
                                    });

                                } catch (Exception e) {
                                    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", e);
                                }
                            }

                            consumer.commitSync();
                        }

                    } catch (WakeupException e) {
                        // –û–∂–∏–¥–∞–µ–º–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ wakeup()
                        if (!running) break;
                    } catch (Exception e) {
                        if (running) {
                            logger.error("Unexpected error in Kafka consumer loop", e);
                        }
                    }
                }
            } finally {
                consumer.close();
                logger.info("KafkaConsumer –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–∫—Ä—ã—Ç");
            }
        });

        consumerThread.setDaemon(true);
        consumerThread.start();
        logger.info("KafkaConsumerService started for topic: {}", topic);
    }

    public void shutdown() {
        running = false;
        consumer.wakeup(); // ‚òÖ‚òÖ‚òÖ –ë–£–î–ò–ú CONSUMER –î–õ–Ø –ë–´–°–¢–†–û–ì–û –í–´–•–û–î–ê ‚òÖ‚òÖ‚òÖ
        try {
            consumerThread.join(3000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }

    public void wakeup() {
        consumer.wakeup();
    }
}